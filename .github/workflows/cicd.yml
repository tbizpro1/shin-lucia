name: Build and Deploy

on:
  push:
    tags:
      - "v*"

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: shin/lucia
  IMAGE_TAG: ${{ github.ref == 'refs/tags/*' && github.ref || github.ref_name }}

jobs:
  docker:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/release/') || startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        run: |
          IMAGE_TAG=$(echo $IMAGE_TAG | sed 's/[^a-z0-9._-]/-/g')
          docker build -t ${{ secrets.ECR_REGISTRY }}/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push ${{ secrets.ECR_REGISTRY }}/$ECR_REPOSITORY:$IMAGE_TAG

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: docker

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Define deployment target
        id: define-environment
        run: |
          if [[ "${{ github.ref }}" == refs/heads/release/v* ]]; then
            echo "host_deploy=${{ secrets.HOST_HOMO }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "host_deploy=${{ secrets.HOST_PROD }}" >> $GITHUB_OUTPUT
          fi
      
      - name: Set up env
        env:
          HOST_DEPLOY: ${{ steps.define-environment.outputs.host_deploy }}
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo ${{ env.HOST_DEPLOY }} >> ~/.ssh/known_hosts
          eval $(ssh-agent -s)
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | ssh-add -
          
          sudo apt -yq update
          sudo apt -yqq install ssh gettext jq
          
          IMAGE_TAG=$(echo $IMAGE_TAG | sed 's/[^a-z0-9._-]/-/g')
          envsubst < docker-compose.tmpl > docker-compose.yml
          
      - name: Deploy application
        env:
          HOST_DEPLOY: ${{ steps.define-environment.outputs.host_deploy }}
        run: |
          scp -P ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=no docker-compose.yml ${{ secrets.HOST_USER }}@${{ env.HOST_DEPLOY }}:${{ secrets.WORK_DIR }}
          ssh -p ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=no ${{ secrets.HOST_USER }}@${{ env.HOST_DEPLOY }} \
            "aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}; \
            docker compose -f ${{ secrets.WORK_DIR }}/docker-compose.yml down; \
            (docker image rm ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG || echo 'Image not found, skipping removal'); \
            docker compose -f ${{ secrets.WORK_DIR }}/docker-compose.yml up -d; \
            docker system prune -af"